pipeline {
    agent any

    tools {
        jdk 'jdk17'
        maven 'maven3'
    }

    environment {
        SCANNER_HOME = tool 'sonar-scanner'
        IMAGE_TAG = "v${BUILD_NUMBER}"
    }

    stages {
        stage("Workspace Cleanup") {
            steps {
                cleanWs()
            }
        }

        stage('Git Checkout') {
            steps {
                git branch: 'main', credentialsId: 'git-cred', url: 'https://github.com/akshay-jpg/Boardgame.git'
            }
        }

        stage('Compile') {
            steps {
                sh "mvn compile"
            }
        }

        stage('Test') {
            steps {
                sh "mvn test"
            }
        }

        stage('Trivy FS Scan') {
            steps {
        	script {
            	try {
                	echo "Running Trivy File System Scan..."
                	sh '''
                	    trivy fs --exit-code 1 --severity HIGH,CRITICAL --format json -o trivy-fs-report.json .
                	    trivy fs --format table -o trivy-fs-report.html .
               		 '''
           	} catch (Exception e) {
                	echo "Security vulnerabilities found!"
                	currentBuild.result = 'FAILURE'
                	error("Stopping pipeline due to critical security issues.")
           	}
        	}
            }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonar') {
                    sh ''' 
                        $SCANNER_HOME/bin/sonar-scanner \
                        -Dsonar.projectName=mega-project-akshay \
                        -Dsonar.projectKey=mega-project-akshay \
                        -Dsonar.java.binaries=target
                    '''
                }
            }
        }

        stage('Quality Gate Check') {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    script {
                        waitForQualityGate abortPipeline: true, credentialsId: 'sonar-token'
                    }
                }
            }
        }

        stage('Build') {
            steps {
                sh "mvn package"
            }
        }

        stage('Publish to Nexus') {
						steps {
							withMaven(globalMavenSettingsConfig: 'global-settings', jdk: 'jdk17', maven: 'maven3', mavenSettingsConfig: '', traceability: true)
								{sh "mvn deploy"}
						}
				}

        stage('Build & Tag Docker Image') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                        sh "docker build -t akshaybajait/boardshack:$IMAGE_TAG ."
                    }
                }
            }
        }

        stage('Docker Image Scan') {
            steps {
                sh "trivy image --format table -o trivy-image-report.html akshaybajait/boardshack:$IMAGE_TAG"
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                        sh "docker push akshaybajait/boardshack:$IMAGE_TAG"
                    }
                }
            }
        }

        stage('Save Image Tag') {
            steps {
                sh "echo ${IMAGE_TAG} > latest_image_tag.txt"
                archiveArtifacts artifacts: 'latest_image_tag.txt', fingerprint: true
            }
        }
    }
}
