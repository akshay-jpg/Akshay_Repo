pipeline {
    agent any

    parameters {
        string(name: 'SERVICE_NAME', defaultValue: '', description: 'Name of the microservice to deploy')
        string(name: 'IMAGE_TAG', defaultValue: '', description: 'Docker image tag to deploy')
    }
	
    stages {
        stage('Update Manifest File in CD Repo') {
            steps {
                script {
                    cleanWs()
                    withCredentials([usernamePassword(credentialsId: 'git-cred', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
                        sh '''
                            echo "Cloning CD repo..."
                            git clone https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/jaiswaladi246/Multi-Tier-Chat-CD.git
                            cd Multi-Tier-Chat-CD

                            echo "Creating feature branch..."
                            BRANCH_NAME="update-${SERVICE_NAME}-${BUILD_NUMBER}"
                            git checkout -b $BRANCH_NAME

                            cd ${SERVICE_NAME}

                            # Determine current live color (default to none if file doesn't exist)
                            if [ -f live-color.txt ]; then
                                LIVE_COLOR=$(cat live-color.txt)
                            else
                                LIVE_COLOR=""
                            fi

                            echo "Current live color is: $LIVE_COLOR"

                            if [ "$LIVE_COLOR" = "blue" ]; then
                                DEPLOY_COLOR="green"
                            else
                                DEPLOY_COLOR="blue"
                            fi

                            echo "Deploying to color: $DEPLOY_COLOR"

                            # Update image in inactive deployment
                            sed -i "s|image: .*${SERVICE_NAME}:.*|image: 192.168.1.100:8082/docker-repo/${SERVICE_NAME}:${IMAGE_TAG}|" $DEPLOY_COLOR/deployment.yml

                            # Switch service to point to new deployment
                            sed -i "s|version: $LIVE_COLOR|version: $DEPLOY_COLOR|" service.yml

                            # Update live-color.txt
                            echo "$DEPLOY_COLOR" > live-color.txt

                            echo "Updated deployment and service manifests"
                            cat $DEPLOY_COLOR/deployment.yml
                            cat service.yml
                            cat live-color.txt

                            git add $DEPLOY_COLOR/deployment.yml service.yml live-color.txt
                            git commit -m "Deploy ${SERVICE_NAME}:${IMAGE_TAG} to ${DEPLOY_COLOR} and switch service selector"
                            git push origin $BRANCH_NAME
                        '''
                    }
                }
            }
        }

        stage('Verify Deployment & Rollback if Needed') {
            steps {
                script {
                        sh '''
							echo "Verifying new deployment (${SERVICE_NAME}-${DEPLOY_COLOR}) status in Kubernetes..."
							sleep 30  # Give deployment time to come up

							DEPLOYMENT_STATUS=$(kubectl -n mega-project get deployment ${SERVICE_NAME}-${DEPLOY_COLOR} -o json | jq -r '.status.conditions[] | select(.type=="Available") | .status')

							if [ "$DEPLOYMENT_STATUS" != "True" ]; then
								echo "Deployment is NOT available. Rolling back to previous version: $LIVE_COLOR"

								# Update service.yml to point back to previous version
								sed -i "s|version: $DEPLOY_COLOR|version: $LIVE_COLOR|" service.yml
								echo "$LIVE_COLOR" > live-color.txt

								git add service.yml live-color.txt
								git commit -m "Rollback to stable version: $LIVE_COLOR due to failed deployment"
								git push origin $BRANCH_NAME

								# Send email via Outlook SMTP using curl + mailto
								curl --url 'smtp://smtp.office365.com:587' \
									--ssl-reqd \
									--mail-from 'devops-alerts@example.com' \
									--mail-rcpt 'team@example.com' \
									--upload-file - \
									--user 'devops-alerts@example.com:YOUR_APP_PASSWORD' <<EOF
										From: DevOps Alerts <devops-alerts@example.com>
										To: DevOps Team <team@example.com>
										Subject: ðŸš¨ Rollback Triggered for $SERVICE_NAME

										Deployment of version $IMAGE_TAG to $DEPLOY_COLOR failed.
										Rolled back to stable version: $LIVE_COLOR.
									EOF

								exit 1  # Mark the job as failed
							else
								echo "Deployment successful!"
								
								# Optional: Create Pull Request using GitHub CLI
								gh pr create --title "Deploy ${SERVICE_NAME}:${IMAGE_TAG}" --body "Automated blue-green deployment trigger for ${SERVICE_NAME}" --base prod --head $BRANCH_NAME
							fi
							'''
                }
            }
        }
    }
}
