pipeline {
    agent any

    tools {
        jdk 'jdk17'
        maven 'maven3'
    }

    environment {
        SCANNER_HOME = tool 'sonar-scanner'
        IMAGE_TAG = "v${BUILD_NUMBER}"
		    VERSION = "1.0.${BUILD_NUMBER}"   // Auto-increment versioning
    }

    stages {
        stage('Workspace Cleanup') {
            steps {
                cleanWs()
            }
        }

        stage('Git Checkout') {
            steps {
                git branch: 'prod', credentialsId: 'git-cred', url: 'https://github.com/your-org/microservice1.git'
            }
        }

        stage('Compile') {
            steps {
                sh "mvn clean validate compile"
            }
        }

        stage('Test') {
            steps {
                sh "mvn test"
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonar') {
                    sh """ 
                        ${SCANNER_HOME}/bin/sonar-scanner \
                        -Dsonar.projectName=mega-project-akshay \
                        -Dsonar.projectKey=mega-project-akshay \
                        -Dsonar.branch.name=prod \
                        -Dsonar.java.binaries=target
                    """
                }
            }
        }

        stage('Quality Gate Check') {
            steps {
                timeout(time: 15, unit: 'MINUTES') {
                    script {
                        waitForQualityGate abortPipeline: true, credentialsId: 'sonar-token', qualityGate: 'Strict Gate'
                    }
                }
            }
        }

        stage('Build') {
            steps {
                sh "mvn package"
            }
        }

        stage('Publish to Nexus') {
            steps {
                withMaven(globalMavenSettingsConfig: 'global-settings', jdk: 'jdk17', maven: 'maven3', traceability: true) {
					sh "mvn deploy -Pprod"
                }
            }
        }		
		
		stage('Build & Tag Docker Image') {
			steps {
				script {
					def imageName = "192.168.1.100:8082/docker-repo/checkout:${IMAGE_TAG}"  // Replace with your Nexus IP
						sh "docker build -t ${imageName} ."
				}
			}
		}

		stage('Push Docker Image') {
			steps {
				script {
					def imageName = "192.168.1.100:8082/docker-repo/checkout:${IMAGE_TAG}"
					withDockerRegistry(credentialsId: 'nexus-docker-cred', url: 'http://192.168.1.100:8082') {
						sh "docker push ${imageName}"
					}
				}
			}
		}

        stage('Save Image Tag') {
            steps {
                sh "echo ${IMAGE_TAG} > checkout_image_tag.txt"
                archiveArtifacts artifacts: 'checkout_image_tag.txt', fingerprint: true
                echo "Saved Image Tag: ${IMAGE_TAG} in a checkout_image_tag.txt"
            }
        }
    }
	post {
        success {
            build job: 'cd-pipeline',
            parameters: [
                string(name: 'SERVICE_NAME', value: 'checkout'),
                string(name: 'IMAGE_TAG', value: "${IMAGE_TAG}")
            ],
            wait: false
        }
    }
}
